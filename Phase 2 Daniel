# Create supervised machine learning model

# Example Model
library(datasets)
library(caret)
data(iris)

set.seed(100)
# Random split of data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list=FALSE) # Create training set
TrainingSet <- iris[TrainingIndex,] # Subset training set
TestingSet <- iris[-TrainingIndex,] # Subset testing set

# SVM Model
# Training Model
Model <- train(Species ~., data = TrainingSet, # Replace 'Species' with variable from SnC set
               method = "svmPoly",
               na.action = na.omit,
               preProcess = c("scale","center"),
               trControl = trainControl(method="none"),
               tuneGrid = data.frame(degree = 1, scale = 1, C = 1)
               )
# Cross-Validation Model
Modelcv <- train(Species ~., data = TrainingSet, # Replace 'Species' with variable from SnC set
                 method = "svmPoly",
                 na.acion = na.omit,
                 preProcess = c("scale","center"),
                 trControl = trainControl(method = "cv", number = 10),
                 tuneGrid = data.frame(degree = 1, scale = 1, C = 1)
                 )

# Apply model for prediction
modelTraining <- predict(Model, TrainingSet) # Apply model on training set
modelTesting <- predict(Model, TestingSet) # Apply model on testing set
Modelcv <- predict(Modelcv, TrainingSet) # Cross-validation

# Confusion matrix and statistics
modelTrainingConfusion <- confusionMatrix(modelTraining, TrainingSet$Species)
print(modelTrainingConfusion)
modelTestingConfusion <- confusionMatrix(modelTesting, TestingSet$Species)
print(modelTestingConfusion)
ModelcvConfusion <- confusionMatrix(Modelcv, TrainingSet$Species)
print(ModelcvConfusion)

#Feature importance
Importance <- varImp(Model)
plot(Importance)
plot(Importance, col = "red")
